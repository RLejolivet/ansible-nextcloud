server_names_hash_bucket_size 64;

server {
    listen 80;
    listen [::]:80;
    server_name {{ office_server_name }};

    location /.well-known/acme-challenge {
        root /var/www;
        try_files $uri $uri/ =404;
    }

    location / {
        return 301 https://$http_host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{ office_server_name }};

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
	ssl_certificate /etc/letsencrypt/live/{{ office_server_name }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ office_server_name }}/privkey.pem;
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;


	# modern configuration. tweak to your needs.
	ssl_protocols TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
	ssl_prefer_server_ciphers on;

	# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	# add_header Strict-Transport-Security max-age=15768000;

	# OCSP Stapling ---
	# fetch OCSP records from URL in ssl_certificate and cache them
	ssl_stapling on;
	ssl_stapling_verify on;

    # static files
    location ^~ /loleaflet {
        proxy_pass https://{{ container_name_office }}:9980;
        proxy_set_header Host $http_host;
        proxy_ssl_verify off;
    }

    # WOPI discovery URL
    location ^~ /hosting/discovery {
        proxy_pass https://{{ container_name_office }}:9980;
        proxy_set_header Host $http_host;
        proxy_ssl_verify off;
    }

    # websockets, download, presentation and image upload
    location ^~ /lool {
        proxy_pass https://{{ container_name_office }}:9980;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_ssl_verify off;
    }
}
